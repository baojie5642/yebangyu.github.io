<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: yedis | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/yedis/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2016-05-05T22:09:38+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yedis源码解析之itoa实现]]></title>
    <link href="http://www.yebangyu.org/blog/2016/04/04/itoa-in-yedis/"/>
    <updated>2016-04-04T12:37:06+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/04/04/itoa-in-yedis</id>
    <content type="html"><![CDATA[<h2 id="section">写在最前</h2>

<p><a href="https://github.com/yebangyu/Yedis">Yedis</a>是一款高性能的nosql数据库，旨在能在某些方面替代Redis。它由不著名码农、秦汉史历史学家、本站站长Yebangyu同学在业余时间独立开发完成。</p>

<p>Github请访问<a href="https://github.com/yebangyu/Yedis">这里</a> ，Python客户端请点击<a href="https://github.com/yebangyu/Yedis/blob/master/src/client/yedis_client.py">这里</a></p>

<h2 id="section-1">提出问题</h2>

<p>如何用C/C++实现正确的、可移植的、高效的、对所有整数都work的itoa函数？</p>

<p>原型如下</p>

<p><code>int itoa(char *buffer, int64_t value);</code></p>

<p>将value转为字符串后存在buffer中，返回字符串的长度。</p>

<!--more-->

<h2 id="section-2">分析问题</h2>

<p>这还不容易么？很容易写出这样的代码：</p>

<p><code>c++
int itoa(char *buffer, int64_t value)
{
  char *p = buffer;
  int64_t tmp = value;
  do {
    *p = tmp % 10 + '0';
    tmp /= 10;
    ++p;
  } while(tmp);
  if(value &lt; 0) {
    *p++ = '-';
  }
  std::reverse(buffer, p);
  return p - buffer;
}
</code>
这个实现，有什么问题？问题是显而易见的：当value为负数时，在第6行，例如value = -123，如果tmp % 10 = -3，而-3 + ‘0’并不是期望的结果。</p>

<p>有些人说，这还不容易吗？把负数都搞成正数，用它的绝对值来计算，不就行了吗？于是很容易写出这样的代码：</p>

<p><code>c++
int itoa(char *buffer, int64_t value)
{
  char *p = buffer;
  int64_t tmp = value &lt; 0 ? -value : value;
  do {
    *p = tmp % 10 + '0';
    tmp /= 10;
    ++p;
  } while(tmp);
  if(value &lt; 0) {
    *p++ = '-';
  }
  std::reverse(buffer, p);
  return p - buffer;
}
</code></p>

<p>还是有问题，注意第4行。回忆一下本科时候所学的计算机组成原理，我们知道，对于有符号整数，它的最大值和最小值是不对称的，绝对值差1。其中，64位有符号整数的范围为[-9223372036854775808, 9223372036854775807]</p>

<p>因此，在第4行，如果value是INT64_MIN，对它求绝对值-value的结果其实已经超出了64位有符号整数可以表示的范围，这里已经溢出了！！！</p>

<p>哦哦，这好办，对INT64_MIN单独处理行不行？</p>

<p>行，但是代码会非常不优雅了。</p>

<p>Matthew Wilson大神的Efficient Integer to String Conversions文章里，使用如下的trick，来处理这些问题。</p>

<p><code>c++
int itoa(char *buffer, int64_t value)
{
  static const char digits[19] = {'9','8','7','6','5','4','3','2','1','0','1','2','3','4','5','6','7','8','9'};
  static const char *zero = digits + 9;
  char *p = buffer;
  int64_t tmp = value;
  do {
    *p = zero[tmp % 10];//下标可能是负数
    tmp /= 10;
    ++p;
  } while(tmp);
  if(value &lt; 0) {
    *p++ = '-';
  }
  std::reverse(buffer, p);
  return p - buffer;
}
</code></p>

<p>这下没问题了吧？有。</p>

<p>问题出在第8、9行。</p>

<p>举个例子，请问，-123 / 10结果是多少？-123 % 10 呢？</p>

<p>因为<code>-123 = (-12) * 10 + (-3)</code> 因此<code>-123 / 10 = -12</code>，同时<code>-123 % 10 = -3</code></p>

<p>但是！</p>

<p>因为<code>-123 =(-13) * 10 + 7</code> 因此<code>-123 / 10 = -13</code>，同时<code>-123 % 10 = 7</code></p>

<p>两种可能的结果？事实上，C++98和C++03标准并没有对被除数和除数不都为正数时的情形进行明确的说明，第8、9行的结果是未定义的，是很不可移植的。</p>

<p>如果在某个具体的实现下，<code>-123 / 10 = -13</code>，并且 <code>-123 % 10 = 7</code> ，那么以上代码结果不对。</p>

<h2 id="section-3">解决问题</h2>

<p>Yedis中实现了itoa，代码在<code>src/server/yedis_order.cpp</code></p>

<p>```c++
YEDIS_MUST_INLINE int64_t int2char(char *buffer, int64_t value)
{
  static const char remainder_offset[2][19] = { { ‘9’, ‘8’, ‘7’, ‘6’, ‘5’, ‘4’, ‘3’, ‘2’, ‘1’, ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’ },//正数</p>

<pre><code>                                            { '9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '9', '8', '7', '6', '5', '4', '3', '2', '1' } };//负数
</code></pre>

<p>static const bool quotient_offset[2][19] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },//正数</p>

<pre><code>                                           { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };//负数								     char *p = buffer;   int64_t tmp = value;   int flag = (value &lt; 0);   const char *digit = remainder_offset[flag] + 9;   const bool *offset = quotient_offset[flag] + 9;   do {
int remainder = tmp % 10;
*p = digit[remainder];
tmp = tmp / 10 + offset[remainder];
++p;   } while (tmp);   if(flag) {
*p++ = '-';   }   std::reverse(buffer, p);   return p - buffer; } ```
</code></pre>

<p>通过两个二维数组，很巧妙、完美的解决了这个问题。它对于[INT64_MIN, INT64_MAX]中的任何一个数都是正确的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yedis: A High Performance Nosql]]></title>
    <link href="http://www.yebangyu.org/blog/2016/03/31/yedis01/"/>
    <updated>2016-03-31T23:53:16+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/03/31/yedis01</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yebangyu/Yedis">Yedis</a>是一款高性能的nosql数据库，旨在能在某些方面替代Redis。它由不著名码农、秦汉史历史学家、本站站长Yebangyu同学在业余时间独立开发完成。</p>

<p>Github请访问<a href="https://github.com/yebangyu/Yedis">这里</a> ，很烂的一个Python客户端请点击<a href="https://github.com/yebangyu/Yedis/blob/master/src/client/yedis_client.py">这里</a>。</p>

<p>Yedis名称由来：Yedis = Yebangyu + Redis</p>

<h2 id="section">动机</h2>

<p>开发Yedis的主要原因是想通过这个项目，进一步提高和熟悉C++服务器端开发相关的技术和知识。</p>

<h2 id="section-1">特性</h2>

<p>换句话说，它和Redis相比有什么不同？</p>

<!--more-->

<p>目标：Redis有的，Yedis都有。Redis没有的，但是很实用的，Yedis也有，比如说Cuckoo Hashing Map等。再比如说Treap，这玩意其实用来实现倒排索引非常高效，细节请参考Sigir2013的论文。</p>

<p>但是不打算兼容它，API和协议也和它不同。</p>

<h2 id="section-2">进度</h2>

<p>目前已经支持</p>

<blockquote>
  <ul>
    <li>Standard Bloom Filter</li>
    <li>Trie</li>
    <li>切换数据库</li>
  </ul>
</blockquote>

<p>还有很多工作要做，包括但是不局限于：</p>

<h3 id="bug-">Bug 修复</h3>

<p>毕竟，稳定和正确是第一位的。</p>

<h3 id="section-3">数据结构</h3>

<blockquote>
  <ul>
    <li>List</li>
    <li>HashMap</li>
    <li>Priority Queue</li>
    <li>Skip List</li>
    <li>Treap</li>
    <li>Kd tree</li>
    <li>Cuckoo Hashing Map</li>
    <li>d-left hashing based Couting Bloom Filter</li>
  </ul>
</blockquote>

<h3 id="section-4">性能优化</h3>

<p>超过或者达到Redis。</p>

<h3 id="section-5">分布式</h3>

<p>单机的内存数据库意义不大。</p>

<h2 id="section-6">截图</h2>

<h3 id="server">server</h3>

<p><img src="http://7xnljs.com1.z0.glb.clouddn.com/server.png" alt="server" /></p>

<h3 id="client">client</h3>

<p><img src="http://7xnljs.com1.z0.glb.clouddn.com/client.png" alt="client" /></p>

<p>不过，Yedis是写着玩的，别太当真。</p>
]]></content>
  </entry>
  
</feed>
