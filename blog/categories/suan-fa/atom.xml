<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2015-12-19T01:02:50+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction To Cuckoo Hashing]]></title>
    <link href="http://www.yebangyu.org/blog/2015/12/19/cuckoo-hashing/"/>
    <updated>2015-12-19T00:41:37+08:00</updated>
    <id>http://www.yebangyu.org/blog/2015/12/19/cuckoo-hashing</id>
    <content type="html"><![CDATA[<h2>Motivation &amp; Intuition</h2>

<p>为什么引入Cuckoo Hashing？</p>

<p>常见的hashing处理冲突方法一般包括两种：开散列（Separate Chaining ）和闭散列（Linear / Quadratic Probing
）。开散列是将冲突的元素组织成一个链表（其实组织成一个二叉树也是没问题的啊），闭散列将冲突的元素还是放在哈希表slot中，使用线性探测等方法进行处理。</p>

<p>那么，这两种方法，都有啥优缺点呢？</p>

<!--more-->


<p>开散列，实现简单，但是对cache不友好，cache miss rate较高。</p>

<p>闭散列，实现相对复杂一点点，对cache很友好，但是对load factor要求较高：load factor稍高性能就急剧下降。</p>

<p>而Cuckoo Hashing在load factor为50%左右的情况下表现较佳。如果哈希函数有4个，那么甚至可以在97%的load factor下良好工作。</p>

<h2>Cuckoo Hashing</h2>

<p>一般的Hashing只包括一个Hash Tables，但是Cuckoo Hashing由两张甚至多张表构成。每张表对应一个哈希函数。本文讨论两张哈希表（记为table1和table2）、两个哈希函数（记为hf1和hf2）这种常见情形。</p>

<p>Insert：首先通过hf1计算出一个slot index，然后查看table1中该slot是否vacant，如果是，则插入；否则通过hf2计算出一个slot index，通过查看table2中该slot是否vacant，如果是，则插入，否则执行replace操作。</p>

<p>replace操作的过程：随机选出一张表，将slot index对应的那个元素踢出(evict)，把我们待插入的元素插到那个位置。那被踢出来的元素呢？尝试插入到另外一张表对应的slot处，这时候可能又踢出一个元素，接下去就是递归的执行这个过程，直到所有元素都安置妥当。</p>

<p>举个例子吧，假如某个时刻，两个哈希表的内容如下：</p>

<p><img src="http://7xnljs.com1.z0.glb.clouddn.com/table1.jpg" alt="table1" /></p>

<p>假设我们待插入的元素为77。</p>

<p>slot index1 = hf1(77) = 1</p>

<p>Table1中的index为1的slot已经被78占了。那么看Table2：</p>

<p>slot index2 = hf2(77) = 3</p>

<p>Table2中的index为3的slot已经被33占了。因此执行replace。</p>

<p>执行replace动作，选择Table2，将slot index = 3的元素33踢出，插入77。然后被踢出的元素33，计算它在Table1中的index为slot index1 = hf2(33) = 2，因此将95踢出，插入33。被踢出的元素95在Table2中的slot index为2，该slot为vacant，没人使用，因此将95插入。完毕。现在的Tables中元素为：</p>

<p><img src="http://7xnljs.com1.z0.glb.clouddn.com/table2.jpg" alt="table2" /></p>

<p>值得注意的是，replace可能失败（发生“死循环”，无法找到一个vacant slot），此时需要进行rehash。因此代码里需要有一定的判断。</p>

<p>在某些假设下，插入操作的期望复杂度为O(1)。</p>

<p>Find：要检查的slot一共两个，index分别为hf1(key)和hf2(key)，因此只要查看一下Table1中的hf1(key)以及Table2中的hf2(key)这两个slot即可。时间复杂度为O(1)。</p>

<p>Del：同Find，要检查的slot也就两个，复杂度为O(1)。</p>

<h2>实现</h2>

<p>简单实现了一个，有需要的可以参考<a href="https://github.com/yebangyu/Yedis/blob/master/src/ds/CuckooHashMap.h">这里</a></p>

<h2>参考文献</h2>

<p><a href="http://resources.mpi-inf.mpg.de/departments/d1/teaching/ws14/AlgoDat/materials/cuckoo.pdf">http://resources.mpi-inf.mpg.de/departments/d1/teaching/ws14/AlgoDat/materials/cuckoo.pdf</a></p>

<p>Cuckoo Hashing原始论文</p>

<p><a href="https://www.eecs.harvard.edu/~michaelm/postscripts/esa2009.pdf">https://www.eecs.harvard.edu/~michaelm/postscripts/esa2009.pdf</a></p>

<p>这篇文章介绍了一些关于Cuckoo Hashing的Open Questions</p>

<p><a href="http://web.stanford.edu/class/cs166/lectures/13/Slides13.pdf">http://web.stanford.edu/class/cs166/lectures/13/Slides13.pdf</a></p>

<p>这个slides偏重对Cuckoo Hashing理论上的分析</p>

<p><a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=6888938&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6888938">http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=6888938&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6888938</a></p>

<p>碉堡了，lock free Cuckoo Hashing</p>
]]></content>
  </entry>
  
</feed>
