<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 并行编程 | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/bing-xing-bian-cheng/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2016-08-21T21:24:24+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MCS Lock]]></title>
    <link href="http://www.yebangyu.org/blog/2016/08/21/mcslock/"/>
    <updated>2016-08-21T20:25:11+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/08/21/mcslock</id>
    <content type="html"><![CDATA[<h2 id="section">回顾</h2>

<p><a href="http://www.yebangyu.org/blog/2016/05/26/ticketlock/">上回</a> 我们介绍了Ticket Lock算法，和传统的简单的CAS操作来实现spin lock相比，它提供了不少很好的性质：比如FIFO、没有饥饿等等。</p>

<p>但是根据<a href="https://pdos.csail.mit.edu/papers/linux:lock.pdf">论文</a>，ticket lock的scalability很差。我们不妨简单回顾一下（代码片段也摘自该论文）：</p>

<p><code>c++
struct spinlock_t 
{
  int current_ticket ;
  int next_ticket ;
}
void spin_lock (spinlock_t *lock)
{
  int t = atomic_fetch_and_inc(&amp;lock -&gt; next_ticket );
  while (t != lock-&gt;current_ticket )
  ; /* spin */
}
void spin_unlock (spinlock_t *lock)
{
  lock-&gt;current_ticket++;
}
</code></p>

<!--more-->

<p>正如论文中指出的那样，当某个core上持有锁的线程释放锁时，它将把其他core上的<code>current_ticket</code>对应的cacheline都invalid掉，之前所有等锁的线程都会通过bus来读取最新的cacheline，这将造成“拥堵”(也就是所谓的bus traffic)。由于在绝大多数体系结构下，这些读取请求都会被串行化，one by one的处理，因此<code>spin_lock</code>所需时间将正比于等待锁的线程数目。</p>

<p>本质上，这里的问题还是在于资源共享：所有等锁线程都spin在同一个全局变量上。如果每个线程仅仅spin在本地变量(该线程私有的变量)，那么将有效的提高scalability。本文要介绍的MCS Lock就是这样的思路。</p>

<h2 id="section-1">实现</h2>

<p>这次，我们先给出实现（环境为：GCC 4.8 + X86体系结构 + Ubuntu 14.04 32bit系统），然后再讲解算法。</p>

<p>```c++
#include<pthread.h> //just for test demo.
#define CPU_BARRIER() __sync_synchronize()
#define CPU_RELAX() __asm__ __volatile__("pause\n": : :"memory")
#define CAS(address, exp, target) __sync_bool_compare_and_swap(address, exp, target)
#define ATOMIC_EXCHANGE(address, val) __atomic_exchange_n(address, val, __ATOMIC_SEQ_CST)
//=========================================
struct MCSLockNode
{
  volatile MCSLockNode *volatile next;
  volatile int spin;
};</pthread.h></p>

<p>typedef MCSLockNode MCSLock;
static void lock(MCSLock **m, MCSLockNode *me)
{
  me-&gt;next = NULL;
  me-&gt;spin = 0;
  MCSLockNode *tail = ATOMIC_EXCHANGE(m, me);
  if (!tail) {
    return;
  }
  tail-&gt;next = me;
  CPU_BARRIER();
  while (!me-&gt;spin) {
    CPU_RELAX();
  }
  return;
}</p>

<p>static void unlock(MCSLock <em>*m, MCSLockNode *me)
{
  if (!me-&gt;next) {
    if (CAS(m, me, NULL)) {
      return;
    }
    while (!me-&gt;next) {
      CPU_RELAX();
    }
  }
  /</em>It holds that me-&gt;next != NULL here */
  me-&gt;next-&gt;spin = 1;
}
```</p>

<h2 id="section-2">算法</h2>

<p>MCS Lock算法维护一个队列(队尾指针tail)。</p>

<p>lock：尝试加锁的线程创建一个节点，并将其中的<code>spin</code>域设置为0。为0表示不是锁的持有者(lock holder)，接着通过原子操作<code>ATOMIC_EXCHANGE</code>，将自己插入队列中，并获得插入前队尾指针tail。如果tail指针为空，说明当前锁是空闲的，没有被任何线程占用，因此获得锁成功；如果tail指针不空，那么设置自己的前驱，然后自旋，等待它的前驱(线程)将自己的<code>spin</code>域置为1。<code>spin</code>域为1，那么该线程就变成锁的持有者了。</p>

<p>注意到23行的cpu级别的memory barrier。因为这里我们需要写<code>tail-&gt;next</code>，然后读<code>me-&gt;spin</code>，这两个是不同的变量，而在X86下，写读不同变量可能会被CPU乱序，而一旦乱序，我们的实现就不正确了。</p>

<p>unlock：释放锁的线程需要检查是否存在后继，如果存在后继，那么将它的后继的<code>spin</code>域设置为1即可，后继将结束spin，成功获得锁。一切搞定，如41行代码所示。</p>

<p>如果不存在后继，那么这里需要特别特别注意。不存在后继有两种可能：</p>

<p>它是最后一个线程。33-35行处理的就是这种情况。那么这时候只需要把队列置为空即可。</p>

<p>它不是最后一个线程。那么此时存在另外一个线程在进行加锁操作，尝试加锁的线程已经通过18-21行设置了新的队尾指针，但是还没设置它的前驱，也就是还没执行到22行。因此释放锁的线程需要等待，等待22行被其他线程执行，等待它被人设置为别人的前驱。这也就是36-38行所做的事。</p>

<p>简单说来，MCS Lock就是将线程们用队列管理起来；加锁的线程spin在自己的变量上；释放锁的线程只更新它后继的变量。</p>

<h2 id="section-3">练习</h2>

<p>1，MCS Lock的优点是显而易见的，因为每个等待锁的线程都spin在自己的局部的变量上。以至于最新版的linux内核已经开始采用它，来代替之前的ticket lock实现。那么，它的缺点呢？</p>

<p>2，列出表格，从公平性、是否出现饥饿、时间空间复杂度等方面，全面对比ticket lock、mcs lock、peterson lock等。</p>

<p>3，编写程序测试这几个算法的性能，考察它们的scalability。</p>

<h2 id="section-4">附录</h2>

<p>MCS Lock测试程序Demo</p>

<p><code>c++
MCSLock *global_lock = NULL;
void* t1(void *arg)
{
  MCSLockNode mcs_node;
  for(int i = 0; i &lt; 1000000; i++) {
    lock(&amp;global_lock, &amp;mcs_node);
    unlock(&amp;global_lock, &amp;mcs_node);
  }
  return NULL;
}
void* t2(void *arg)
{
  MCSLockNode mcs_node;
  for(int i = 0; i &lt; 1000000; i++) {
    lock(&amp;global_lock, &amp;mcs_node);
    unlock(&amp;global_lock, &amp;mcs_node);
  }
  return NULL;
}
int main()
{
  pthread_t pthread1;
  pthread_t pthread2;  
  pthread_create(&amp;pthread1, NULL, t1, NULL);
  pthread_create(&amp;pthread2, NULL, t2, NULL);
  pthread_join(pthread1, NULL);  
  pthread_join(pthread2, NULL);  
  return 0;
}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现可重入锁]]></title>
    <link href="http://www.yebangyu.org/blog/2016/07/12/reentrantlock/"/>
    <updated>2016-07-12T20:27:25+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/07/12/reentrantlock</id>
    <content type="html"><![CDATA[<h2 id="section">基本概念</h2>

<p>可重入锁(Reentrant Lock)，是指允许同一个线程多次对该锁进行acquire动作。对于不可重入的锁，当一个线程多次调用acquire后将造成死锁。可重入锁具有广泛的应用，例如：</p>

<p><code>c++
struct Routine
{
  void f()
  {
    lock_.lock();
    h();
    g();
    lock_.unlock();
  }
  void g()
  {
    lock_.lock();
    cout&lt;&lt;"abc"&lt;&lt;endl;
    lock_.unlock();
  }
  void h()
  {
    lock_.lock();
    cout&lt;&lt;"def"&lt;&lt;endl;
    lock_.unlock();
  }
  Lock lock_;
};
</code></p>

<!--more-->

<p>在函数f里调用了g和h，而在每个函数里都试图对lock进行acquire操作。可能你会说保证只有一个函数加锁就行了，但是有时候很难做成这个样子，毕竟一般我们都要求任何一个public函数被调用时候都得保证是线程安全因此需要加锁的。</p>

<p>那么，reentrant lock和recursive lock有什么区别呢？根据<a href="https://en.wikipedia.org/wiki/Reentrant_mutex">wikipedia</a>，这两个是一样的。</p>

<h2 id="section-1">基本实现</h2>

<p>自己实现一个可重入锁并不困难：我们增加两个field，一个用来记录锁当前被哪个线程拥有；一个用来记录尝试acquire的次数。如下所示：</p>

<p><code>c++
#include &lt;stdint.h&gt;
#include &lt;pthread.h&gt;
Class MyReentrantLock
{
public:
  MyReentrantLock()
  {
    lock_holder_ = NULL;
    hold_counter_ = 0;
    pthread_mutex_init(&amp;lock_, NULL);
  }
  int lock()
  {
    int ret = 0;
    pthread_t curr_id = pthread_self();
    if (lock_holder_ == curr_id) {
      ++hold_counter_;
    } else {
      pthread_mutex_lock(&amp;lock_);
      lock_holder_ = curr_id;
      hold_counter_ = 1;
    }
    return ret;
  }
  int unlock()
  {
    int ret = 0;
    pthread_t curr_id = pthread_self();
    if (lock_holder_ != curr_id) {
      ret = -1;
    } else {
      if (--hold_counter_ == 0) {
        lock_holder_ = NULL;
        pthread_mutex_unlock(&amp;lock_);
      }
    }
    return ret;
  }
private:
  pthread_mutex_t lock_;
  pthread_t lock_holder_;
  int64_t hold_counter_;
};
</code></p>

<p>顺便说一句，默认pthread_mutex_t是不可重入的。为了让它可重入，可以这样：</p>

<p><code>c++
pthread_mutex_t mutex;
pthread_mutexattr_t attr;
pthread_mutexattr_init(&amp;attr);
pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE);//设置可递归也就是可重入
pthread_mutex_init(&amp;mutex, &amp;attr);
</code></p>

<h2 id="section-2">参考文献</h2>

<p>1，《The Art Of Multiprocessor Programming》 8.4节，187页</p>

<p>这本书的作者都是并发编程大仙级人物。虽然是用Java语言写的，但是还是很值得一读。</p>

<p>2，<a href="http://preshing.com/20120305/implementing-a-recursive-mutex/">Implementing a Recursive Mutex</a></p>

<p>很好的博客，每篇都非常高水准。我们最近正在翻译其中和并发编程相关的文章。可以点击这里查看：<a href="http://www.chongh.wiki/categories/High-performance/">深入探索并发编程系列</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequence Lock]]></title>
    <link href="http://www.yebangyu.org/blog/2016/06/26/sequence-lock/"/>
    <updated>2016-06-26T14:24:59+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/06/26/sequence-lock</id>
    <content type="html"><![CDATA[<p>在读多写少(Read Mostly)的场景里，我们可能会使用的同步设施包括：</p>

<blockquote>
  <ul>
    <li>Mutex</li>
    <li>Reader Writer Lock</li>
    <li>Sequence Lock</li>
    <li>Read Copy Update</li>
  </ul>
</blockquote>

<p>前面两种一般人都很清楚了，如雷贯耳、妇孺皆知。如果您对mutex的实现细节有兴趣，建议您阅读我的两篇博客：<a href="http://www.yebangyu.org/blog/2016/03/04/petersonalgorithm/">这篇</a>和<a href="http://www.yebangyu.org/blog/2016/05/26/ticketlock/">这篇</a></p>

<p>从今天起，我们介绍后面两种同步设施。今天我们先介绍Sequence Lock。</p>

<!--more-->

<h2 id="section">基本原理</h2>

<p>我们知道，传统的Reader Writer Lock是reader preference的，可能会产生writer starvation。和Reader Writer Lock不同，sequence lock是writer preference的，writer随时都可以更新临界资源。</p>

<p>sequence lock的精髓在于一个sequence count。当writer在更新时，count为奇数；不存在writer更新时，该count为偶数。</p>

<p>count初始化为一个偶数，比如说0。当writer操作临界资源前，先将count++，这时候count变成奇数；然后writer操作临界资源，完毕后，再count++，这时候count将又恢复为偶数。</p>

<p>对于reader，每次进入临界区前读取count值，如果为偶数，说明没有writer存在，那么它可以进入临界区；如果为奇数，那么它需要等待，不断重试，读取count直到count为偶数。进入临界区读取临界资源后，你知道，从reader进入临界区到试图离开临界区这段时间里，可能writer进来了，因此reader需要重新读取count，看和它进入临界区时的count是否相等，不等的话说明此次读取失败，需要重试。</p>

<h2 id="section-1">基本实现</h2>

<p>```c++
#include<mutex> //c++11的mutex
using namespace std;</mutex></p>

<p>struct SequenceLock
{
  volatile uint64_t sequence_count;
  mutex lock; //这把锁是用于writer们互斥的。保证只有一个writer能更新。和reader无关。
};</p>

<p>static void seqlock_init(SequenceLock &amp;sl)
{
  sl.sequence_count = 0;//初始化为偶数
}</p>

<p>static uint64_t read_seqbegin(SequenceLock &amp;sl)
{
  uint64_t sc = 0;
  while(true) {
    sc = sl.sequence_count;
    CPU_MEMORY_BARRIER();
    if (!(sc &amp; 1)) {
      break; //sc是偶数，说明没有writer，返回
    } 
  }
  return sc;
}</p>

<p>static bool reader_need_retry(SequenceLock &amp;sl, uint64_t oldseq)
{
  uint64_t s = 0;
  CPU_MEMORY_BARRIER();
  s = sl.sequence_count;
  return s != oldseq;
}</p>

<p>static void write_seqlock(SequenceLock &amp;sl)
{
  sl.lock.lock();
  ++sl.sequence_count;//让count变为奇数，和读者声明自己的存在
  CPU_MEMORY_BARRIER();
}</p>

<p>static void write_sequnlock(SequenceLock &amp;sl)
{
  CPU_MEMORY_BARRIER();
  ++sl.sequence_count;//让count恢复为偶数
  sl.lock.unlock();
}</p>

<p>```</p>

<h2 id="section-2">深度思考</h2>

<p>1，sequence lock和reader writer lock相比，有什么区别？</p>

<p>最主要的区别，如上所述，就是writer随时随地可以进行更新，不会出现writer starvation的情况。正因为如此，如果update heavily，那么可能造成reader starvation。然而，正如我们一早所说的，sequence lock用于read mostly的situation。因此，reader starvation几乎不会发生。</p>

<p>reader端并不需要加锁，只在极少情况下需要重试而已。因此，从某种角度来说，sequence lock是一种乐观锁。</p>

<p>2，sequence_count声明为<code>uint32_t</code>是否可以？</p>

<p>看你的writer更新的频率。假如你的writer每小时才更新一次，那么一天更新24次，一个月更新720次，一年才262800次，一百年才26280000次，是没有溢出危险的。如果每纳秒更新一次呢？算算看。</p>

<p>我知道，C语言uint32_max（奇数）再自增1之后溢出会回滚到0（偶数）不会影响到程序的正确性，但是好的程序个人认为不应该对此有依赖。</p>

<p>3，使用sequence lock可能会有什么坑？</p>

<p>假如我们的临界资源是这样的：</p>

<p><code>c++
something *p;
</code></p>

<p>reader进入临界区后读取p，存放在自己的变量something *q里，然后返回。之后writer对p进行了free操作；如果reader之后使用<code>*q</code>将发生错误。对于这种情况，需要使用值拷贝语义，或者通过引入<a href="http://www.yebangyu.org/blog/2015/12/10/introduction-to-hazard-pointer/">hazard pointer</a>等其他机制来避免内存释放问题。不仅如此，实际上在临界区里，reader都不可以使用<code>*p</code>，这是因为和reader writer lock不同，sequence lock是不保证writer的不存在的，也就是说在临界区里，是可能随时有writer对p进行释放等操作的（这才需要读者后面的重试操作嘛），这也是它和读写锁的最大不同。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ticket Lock]]></title>
    <link href="http://www.yebangyu.org/blog/2016/05/26/ticketlock/"/>
    <updated>2016-05-26T19:25:15+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/05/26/ticketlock</id>
    <content type="html"><![CDATA[<h2 id="section">简单回顾</h2>

<p><a href="http://www.yebangyu.org/blog/2016/03/04/petersonalgorithm/">上回</a> 我们介绍了peterson算法来实现spin lock，算法简单，实现简单，但是值得注意和留心的点很多。</p>

<p>粗略说来，peterson算法的主要缺点在于：</p>

<p>1，很难推广到n个线程(n&gt;=3)。原始的算法针对两个线程，如果想应用在多个线程的场景里，需要做一定的修改。</p>

<p>2，peterson算法的动机是仅仅使用load和store来实现互斥访问。然而，我们知道，现代体系结构下，CPU和编译器会对读写操作进行乱序，仅仅依靠读写操作而不使用memory barrier就编写正确的程序非常困难。</p>

<h2 id="ticket-lock">Ticket Lock</h2>

<p>在介绍Ticket Lock之前，我们首先分析一个妇孺皆知、地球人都知道的实现spin lock的方法（伪代码）：</p>

<!--more-->

<p><code>c++
int flag = 0;
void lock()
{
  while (!cas(flag, 0, 1));
  //get lock ! now , flag == 1
}
void unlock()
{
  flag = 0;
}
</code>
上面代码的第四行使用一个CAS原子操作：判断如果flag是否为0，如果为0，将它的值设置为1。判断和设置，所谓的test和set是一个原子操作，返回ture；如果不为0，则不设置，返回false。</p>

<p>这就是大名鼎鼎的<code>test-and-set</code>来实现spin lock。想想看，这种实现方式有什么缺点？</p>

<p>缺点一：不保证公平性，不满足FIFO先来先服务。假如有两个线程在第4行上spin，那么当持有锁的线程释放锁之后，这两个线程谁会成功拿到锁和谁先来spin没有任何直接关系。</p>

<p>缺点二：我们知道，不管CAS操作是否成功，都会产生大量的因为需要保证cache coherency而产生的message，降低性能。因此有一种改进方式：在CAS之前，先读取flag的值，当flag的值为0的时候，再尝试CAS。如下图的伪代码所示：</p>

<p><code>c++
int flag = 0;
void lock()
{
  while(true) {
    if (flag == 0) {
      if (cas(flag, 0, 1)) {
        break;
      }
    }
  }
  //get lock ! now , flag == 1
}
void unlock()
{
  flag = 0;
}
</code></p>

<p>改进后的算法叫做<code>test-and-test-and-set</code>，然而即使经过改进，上面的两个问题依旧存在。在很多场景下，我们希望：</p>

<p>1，保证公平性。</p>

<p>2，原子操作少些，少些，再少些。</p>

<p>3，没有饥饿。</p>

<p>这就涉及到我们要谈到的Ticket Lock。</p>

<p>想想我们去银行排队办业务：先拿个号，然后排队，叫到你的号就是服务你的时候了。没叫到你？老老实实等着吧（这里不考虑关系户走后门插队）。</p>

<p><a href="https://github.com/yebangyu/Soupen/blob/master/src/concurrency/soupen_ticket_spin_lock.h">Soupen</a>中实现了ticket spin lock，这里摘抄如下：</p>

<p><code>
class SoupenTicketSpinLock
{
  public:
    SoupenTicketSpinLock()
    {
      next_id_ = 0;
      service_id_ = 0;
    }
    bool lock()
    {
      uint64_t my_id = FETCH_AND_ADD(&amp;next_id_, 1);
      CPU_BARRIER();
      while(my_id != ACCESS_ONCE(service_id_)) {}
      return true;
    }
    void unlock()
    {
      INC_ATOMIC(&amp;service_id_, 1);
    }
  private:
    uint64_t next_id_;
    uint64_t service_id_;
};
</code>
第11行：获得自己的号，同时把号码递增。其中<code>fetch_and_add</code>是一个原子操作:</p>

<p><code>c++
int fech_and_add(int *p, int inc)
{
  int origin = *p;
  *p += inc;
  return origin;
}
</code>
顺便说一下，也有所谓的<code>add_and_fech</code>：
<code>c++
int add_and_fetch(int *p, int inc)
{
  *p += inc;
  return *p;
}
</code>
区别就在于返回原来的值还是返回更新后的值</p>

<p>第13行：判断是否到自己的号了，否则就一直等待。</p>

<p>第18行：叫下一个人，和下一个人说，轮到你了。</p>

<p>关于<code>CPU_BARRIER</code>、<code>FETCH_AND_ADD</code>、<code>ACCESS_ONCE</code>和<code>INC_ATOMIC</code>的实现，请参考<a href="https://github.com/yebangyu/Soupen/blob/master/src/base/soupen_define.h">Soupen</a>中的相关代码。</p>

<p>公平性：不难看出，先来排队的人将优先获得服务。</p>

<p>性能：不难看出，和之前的不断CAS的版本相比，ticket lock算法中，一次lock调用只有一次原子操作开销。</p>

<p>饥饿：不难看出，每个线程都可以按照自己的排队顺序拿到锁，不会发生饥饿现象。</p>

<p>哈哈，如果过号呢？现实生活里，去银行排队可能因为时间太长不爽闪人了，银行叫人如果连叫三遍还没看到你就会叫下一个人了。</p>

<p>在这里，假如持有锁的线程crash了，来不及调用unlock，那么所有等待锁的线程都将一直spin，除非，哦，除非海量的线程来排队不断自增<code>next_id_</code>导致<code>next_id_</code>溢出回滚，然后重新等于<code>service_id_</code>。</p>

<p>如果持有锁的线程没有crash，它正常释放锁，而叫到的下一个线程之前crash了，那么也会导致所有排队的线程拿不到锁。</p>

<p>顺便说一下，(部分)Linux Kernel的spin lock就是用ticket lock实现的。更多细节可以参考<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-spinlock/">这里</a>。</p>

<p>那么ticket lock是否完美呢？有什么惊人的缺点呢？请看下集。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peterson算法实现spin lock]]></title>
    <link href="http://www.yebangyu.org/blog/2016/03/04/petersonalgorithm/"/>
    <updated>2016-03-04T22:26:51+08:00</updated>
    <id>http://www.yebangyu.org/blog/2016/03/04/petersonalgorithm</id>
    <content type="html"><![CDATA[<p>对spin lock和mutex不熟悉的朋友，可以看<a href="http://www.yebangyu.org/blog/2016/01/24/spinlock-and-mutex/">上篇</a>博客。</p>

<h2 id="section">提出问题</h2>

<p>如何仅仅通过load和store实现spin lock呢？</p>

<p>本文只考虑、只针对只有两个线程的情形。假设这两个线程的id分别为0和1。编程环境为X86体系结构 + Intel CPU + gcc</p>

<!--more-->

<h2 id="section-1">分析问题</h2>

<h3 id="section-2">尝试一：仅使用一个变量</h3>

<p>仅使用一个bool类型变量flag，线程i申请锁时，查看flag是否为1-i，如果不是，说明另外一个线程没有在临界区，申请成功，并把flag的值设置为i。</p>

<p>这种方法的问题在于，检查flag是否为1-i，以及设置flag为i这两步不是原子的，无法仅仅通过load和store来原子实现。（需要CAS等类似的原子操作）</p>

<h3 id="section-3">尝试二：使用两个变量</h3>

<p>根据前面的分析，我们可以使用两个bool变量flag[0]和flag[1]。线程i申请锁时，先把flag[i]设置为true，表示自己试图进入临界区，然后查看flag[1-i]是否为true，如果是，说明另一个线程在临界区，于是spin。</p>

<p>这个方法的问题在于可能发生这样的问题：</p>

<p>线程0把flag[0]设置为true，这时候还没开始检查flag[1]，此时线程1把flag[1]设置为true。</p>

<p>接下去，每个线程都发现对方的flag为true，而实际上两个都没在临界区中，却谁都没法拿到锁，发生starvation现象。</p>

<h3 id="section-4">尝试三：使用三个变量</h3>

<p>在尝试二的基础上，再增加一个变量turn，表示谁先将自己的flag设置为true（仅仅通过那两个flag是没法区分的，想想看，是不是这样的）。因此这个变量可以用来裁决谁取得进入临界区的权利。</p>

<h2 id="section-5">解决问题</h2>

<p>以上尝试三所描述的方法，就是大名鼎鼎的peterson算法的雏形了。简单实现如下（注意，本文的平台是x86体系结构 + Intel CPU + gcc）：</p>

<p><code>c++
class PetersonSpinLock
{
  public:
    PetersonSpinLock()
    {
      flags_[0] = false;
      flags_[1] = false;
      turn_ = false;//initial value does not matter
    }
    bool lock(int thread_id)
    {
      int other = !thread_id;
      flags_[thread_id] = true; 
      COMPILER_BARRIER();
      turn_ = thread_id;
      CPU_BARRIER();// essential
      while(flags_[other] &amp;&amp; turn_ == thread_id) {
        CPU_RELAX();//spin
      }
      //get lock successfully
      return true;
    }
    bool unlock(int thread_id)
    {
      flags_[thread_id] = false;
      return true;
    }
  private:
    volatile bool flags_[2];
    volatile bool turn_;
};
</code></p>

<p>以下是对peterson算法的思考和讨论。在看我的分析之前，请自己尝试思考以下问题：（温馨提示：在C/C++中，if条件判断是短路求值的。也就是说对于if(A &amp;&amp; B)，一旦知道A是false，那么B将不用evaluate了）</p>

<blockquote>
  <ul>
    <li>peterson算法如何防止starvation的发生？</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>peterson算法如何防止两个线程同时进入临界区？</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>代码13行和15行能否调换执行顺序？</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>代码15行能否改为<code>turn_ = !thread_id</code> ？</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>16行的cpu 级别的memory barrier是否必要？</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>实现（针对两个线程的）peterson算法所需最少空间为多少？</li>
  </ul>
</blockquote>

<p>思考了没？下面我们来分析讨论一下：</p>

<h3 id="petersonstarvation">peterson算法如何防止starvation的发生？</h3>

<p>假设某时刻两个线程都在spin，也就是17行中while的条件对两个线程都成立，也就是说：</p>

<p>flag_[0] == true 并且 trun_ == 0 并且 flag_[1] == true 并且turn_ == 1</p>

<p>但是turn_只能有一个值，矛盾。</p>

<h3 id="peterson">peterson算法如何防止两个线程同时进入临界区？</h3>

<p>如果两者同时进入临界区，说明17行中的while判断对两个线程都为false，也就是说</p>

<p>flag_[1] == false 或者 turn _ == 1</p>

<p>同时</p>

<p>flag_[0] == false 或者 turn_ == 0</p>

<p>因此只有四种情形：</p>

<p>flag_[1] == false  &amp;&amp; flag_[0] == false  与13行矛盾</p>

<p>flag_[1] == false  &amp;&amp; turn_ == 0  与13行矛盾</p>

<p>turn_ == 1 &amp;&amp; flag_[0] == false 与13行矛盾</p>

<p>turn _ == 1 &amp;&amp; turn _ == 0 不可能发生</p>

<p>而一旦例如说，线程0，进入临界区后，线程1会因为turn_的值而spin，直到线程0通过unlock将flag_[0]设置为false。</p>

<p>因此，13、15两行的顺序很重要。是这样的吗？接着往下看。</p>

<h3 id="section-6">代码13行和15行能否调换执行顺序？</h3>

<p>不可以，否则可能发生两个线程同时进入临界区。</p>

<p>考虑以下情形：</p>

<p>线程0执行turn_ = 0</p>

<p>线程1执行turn_ = 1</p>

<p>线程1执行flag_[1] = true</p>

<p>线程1执行17行的判断，因为flag_[0]为false，所以线程1进入临界区。</p>

<p>线程0执行flag_[0] = true</p>

<p>线程0执行17行判断，此时turn_等于1，所以线程0也进入临界区。</p>

<p>因此13行和15行执行顺序不可以交换；而这两个都是store操作，在X86 Intel CPU下，cpu不会乱序执行它们，因此只需要在14行增加一个compiler级别的memory barrier，防止编译器乱序即可。</p>

<h3 id="turn--threadid">代码15行能否改为<code>turn_ = !thread_id</code></h3>

<p>可以。只是如果15行改为<code>turn_ = !thread_id</code>，那么17行需要将<code>turn_ == thread_id</code>也改为<code>turn_ == !thread_id</code>。也就是说turn_的初始值是什么并不重要，turn_设置成什么值也不太重要，重要的是通过turn_能区分出谁先尝试申请锁。</p>

<h3 id="cpu-memory-barrier">16行的cpu 级别的Memory Barrier是否必要？</h3>

<p>非常必要。否则17行对flags_[other]的读取（判断）操作可能和15行发生乱序（写读乱序。而13、15属于写写，是不会被CPU乱序执行的，不用加cpu 级别的memory barrier），最后可能导致两个线程同时进入临界区。这点，请读者务必自己亲自分析。非常重要！</p>

<p>不加Memory Barrier，乱序后，考虑以下情形：</p>

<p>线程0判断flag_[1]，发现为false（此时线程1还没开始调用lock函数，flag_[1]还是它的初始值false），进入临界区。</p>

<p>线程1判断flag_[0]，发现为true</p>

<p>线程1执行<code>turn_ = 1</code></p>

<p>线程0执行<code>turn_ = 0</code></p>

<p>线程1执行17行判断，此时turn_等于0，所以线程1也进入临界区。</p>

<h3 id="peterson-1">实现（针对两个线程的）peterson算法所需最少空间为多少？</h3>

<p>3个bit足矣。两个flag_两个bit，turn_也只需要1个bit。</p>

<h2 id="section-7">附录：</h2>

<p>在X86下，<code>CPU_BARRIER</code>和<code>CPU_RELAX</code>以及<code>COMPILER_BARRIER</code>可以用gcc内置feature，通过宏来实现：</p>

<p><code>c++
#define CPU_BARRIER() __sync_synchronize()
#define COMPILER_BARRIER() __asm__ __volatile__("" : : : "memory")
#define CPU_RELAX() __asm__ __volatile__("pause": : :"memory")
</code></p>

<p>18行不用CPU_RELAX而是简单的一个分号行吗？可以的。不过加了CPU_RELAX可以提高性能、节能减排。</p>

<h2 id="section-8">致谢</h2>

<p>本文发出后，微博网友@finalpatch 指出应在代码的29、30行加上volatile。非常感谢。</p>

<p>本文发出后，微博网友@linyvxiang 指出了文中的两处笔误。非常感谢。</p>
]]></content>
  </entry>
  
</feed>
