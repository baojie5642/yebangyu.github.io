<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 编译链接 | Yebangyu's Blog]]></title>
  <link href="http://www.yebangyu.org/blog/categories/bian-yi-lian-jie/atom.xml" rel="self"/>
  <link href="http://www.yebangyu.org/"/>
  <updated>2015-11-25T22:12:27+08:00</updated>
  <id>http://www.yebangyu.org/</id>
  <author>
    <name><![CDATA[Yebangyu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用Distcc和Dmucs构建大规模、分布式C++编译环境(上)]]></title>
    <link href="http://www.yebangyu.org/blog/2015/11/23/build-distributed-compilation-ev/"/>
    <updated>2015-11-23T22:48:32+08:00</updated>
    <id>http://www.yebangyu.org/blog/2015/11/23/build-distributed-compilation-ev</id>
    <content type="html"><![CDATA[<p>如果你的<strong>C++</strong>项目非常庞大，含有<strong>1000</strong>个<strong>.h</strong>文件，<strong>2000</strong>个<strong>.cpp</strong>文件，那么我敢打赌，每次编译所花的时间，都足够你喝<strong>3000</strong>杯咖啡了。如何加快编译速度？</p>

<p><strong>Distcc</strong>是开源的用于搭建分布式编译环境的利器，它通过利用多台机器的资源，并行编译，来解决这个棘手的问题。然而，它的调度算法过于简单，不大合理，因此我们利用<strong>DMUCS</strong>提供的调度功能，来搭建一个相对完美的分布式编译平台。本文，我们首先介绍如何（单独）使用<strong>Distcc</strong>来加速编译，下一篇介绍如何组合使用<strong>Distcc</strong>+<strong>DMUCS</strong>来做进一步的完善和优化。</p>

<p>话不多说，我们的编译平台包括：</p>

<!--more-->


<p>开发机（<strong>Client</strong>）：这一台机器上有我们的项目、工程文件、代码，平时我们在这台机器上写代码，要编译的对象也在这台机器上。机器<strong>IP</strong>为<strong>192.168.1.99</strong></p>

<p>服务器（<strong>Server</strong>）：负责编译的机器，一共有<strong>3</strong>台。<strong>IP</strong>分别为<strong>192.168.1.11</strong>,<strong>192.168.1.22</strong>,<strong>192.168.1.33</strong>.</p>

<p>调度器（<strong>Scheduler</strong>）：调度程序所在的机器，负责把编译任务合理的派发到编译机器（服务器）的编译程序上。<strong>IP</strong>为<strong>192.168.1.88</strong>。这台机器的部署和配置，我们留到下一篇博文介绍。</p>

<p>以上所有机器都是安装的<strong>Ubuntu 14.04</strong>操作系统。</p>

<h2>服务器</h2>

<p>1，安装<strong>gcc</strong></p>

<pre><code>sudo apt-get install gcc
</code></pre>

<p>2，安装<strong>Distcc</strong></p>

<pre><code>sudo apt-get install distcc
</code></pre>

<p>安装后可以得到两个二进制文件，<strong>distccd</strong>和<strong>distcc</strong>。前者主要负责网络数据处理，后者可以认为是<strong>g++</strong>的前端，调用<strong>g++</strong>进行编译。</p>

<p>3，配置<strong>Distcc</strong></p>

<p>打开<code>/etc/default/distcc</code>，设置如下配置项：</p>

<pre><code>STARTDISTCC="true"  
ALLOWEDNETS="127.0.0.1 192.168.1.0/24"
LISTENER="0.0.0.0"
</code></pre>

<p>第一行设置开机就启动distccd</p>

<p>第二行设置允许利用本机进行编译的开发机</p>

<p>第三行设置监听的网络</p>

<p>4，启动<strong>distccd</strong></p>

<pre><code>sudo service distcc start
</code></pre>

<p>经过以上配置，每次机器开机，都会自动运行<strong>distccd</strong>。</p>

<p>运行如下命令确认下：</p>

<pre><code>ps -aux | grep distccd
</code></pre>

<p>如果看到类似的输出，说明一切OK了。</p>

<pre><code>distccd   3457  0.0  0.0   3260   144 ?        SNs  23:33   0:00 /usr/bin/distccd --pid-file=/var/run/distccd.pid --log-file=/var/log/distccd.log --daemon --allow 127.0.0.1 --listen 0.0.0.0 --nice 10
distccd   3458  0.0  0.0   3260   144 ?        SN   23:33   0:00 /usr/bin/distccd --pid-file=/var/run/distccd.pid --log-file=/var/log/distccd.log --daemon --allow 127.0.0.1 --listen 0.0.0.0 --nice 10
distccd   3461  0.0  0.0   3260   144 ?        SN   23:33   0:00 /usr/bin/distccd --pid-file=/var/run/distccd.pid --log-file=/var/log/distccd.log --daemon --allow 127.0.0.1 --listen 0.0.0.0 --nice 10
</code></pre>

<h2>开发机</h2>

<p>1，安装<strong>Distcc</strong></p>

<p>当然啦，我们假设您的开发机上已经安装<strong>gcc</strong>了。</p>

<p>2，设置编译资源</p>

<p>这一步是指定哪些机器（也就是上面的<strong>Server</strong>）来负责编译工作。</p>

<pre><code>export DISTCC_HOSTS="192.168.1.11 192.168.1.22 192.168.1.33"
</code></pre>

<p>每台机器的<strong>IP</strong>之间用空格隔开。</p>

<p>如果机器很多，那么这样填写可能不大方便，可以在<code>/etc/distcc/hosts</code>里添加。</p>

<p>这两种方法可以任选一种，如果你两种都用，那么<strong>Distcc</strong>只认<strong>DISTCC_HOSTS</strong>值。</p>

<p>3，应用<strong>Distcc</strong></p>

<p>应用<strong>Distcc</strong>来编译代码有几种方法：</p>

<p>方法一：修改<strong>makefile</strong>中的<code>CXX</code>的值</p>

<p>将<strong>makefile</strong>文件中的这一行</p>

<pre><code>CXX = g++ 
</code></pre>

<p>改为</p>

<pre><code>CXX = distcc g++
</code></pre>

<p>然后运行<code>make -j18</code>即可。这里的<strong>18</strong>，为所有服务器的<strong>CPU Cores</strong>的数量乘以<strong>1.5</strong>。上面有3台服务器，每台有<strong>4</strong>核，因此这里设置为<strong>18</strong>。</p>

<p>为了获得最优值，很可能需要反复实验、测试。</p>

<p>方法二：修改<strong>configure</strong>文件</p>

<p>如果您的<strong>makefile</strong>文件由<strong>automake</strong>产生，那么在运行<code>./configure</code>时得加上参数，变为：</p>

<pre><code>./configure --CXX=distcc g++
</code></pre>

<p>那么生成的<strong>makefile</strong>文件将自动使用<strong>Distcc</strong>了。</p>

<p>如果不出意外，编译速度已经大大提升了。然而，还有提高的空间，欲知详情，请听下回分解。</p>
]]></content>
  </entry>
  
</feed>
